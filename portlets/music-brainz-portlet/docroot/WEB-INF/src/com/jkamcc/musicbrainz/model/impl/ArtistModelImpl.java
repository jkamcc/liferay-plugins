/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.jkamcc.musicbrainz.model.impl;

import com.jkamcc.musicbrainz.model.Artist;
import com.jkamcc.musicbrainz.model.ArtistModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Artist service. Represents a row in the &quot;artist&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.jkamcc.musicbrainz.model.ArtistModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArtistImpl}.
 * </p>
 *
 * @author Juan Carrillo
 * @see ArtistImpl
 * @see com.jkamcc.musicbrainz.model.Artist
 * @see com.jkamcc.musicbrainz.model.ArtistModel
 * @generated
 */
public class ArtistModelImpl extends BaseModelImpl<Artist>
	implements ArtistModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a artist model instance should use the {@link com.jkamcc.musicbrainz.model.Artist} interface instead.
	 */
	public static final String TABLE_NAME = "artist";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "_resourceprimkey", Types.BIGINT },
			{ "gid", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "sort_name", Types.VARCHAR },
			{ "begin_date_year", Types.INTEGER },
			{ "end_date_year", Types.INTEGER },
			{ "type", Types.INTEGER },
			{ "area", Types.INTEGER },
			{ "gender", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table artist (id LONG not null primary key,_resourceprimkey LONG,gid VARCHAR(75) null,name VARCHAR(75) null,sort_name VARCHAR(75) null,begin_date_year INTEGER,end_date_year INTEGER,type INTEGER,area INTEGER,gender INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table artist";
	public static final String ORDER_BY_JPQL = " ORDER BY artist.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY artist.id ASC";
	public static final String DATA_SOURCE = "musicBrainzDataSource";
	public static final String SESSION_FACTORY = "musicBrainzSessionFactory";
	public static final String TX_MANAGER = "musicBrainzTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.jkamcc.musicbrainz.model.Artist"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.jkamcc.musicbrainz.model.Artist"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.jkamcc.musicbrainz.model.Artist"));

	public ArtistModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Artist.class;
	}

	@Override
	public String getModelClassName() {
		return Artist.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("resourcePrimKey", getResourcePrimKey());
		attributes.put("gid", getGid());
		attributes.put("name", getName());
		attributes.put("sortName", getSortName());
		attributes.put("beginDateYear", getBeginDateYear());
		attributes.put("endDateYear", getEndDateYear());
		attributes.put("type", getType());
		attributes.put("area", getArea());
		attributes.put("gender", getGender());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long resourcePrimKey = (Long)attributes.get("resourcePrimKey");

		if (resourcePrimKey != null) {
			setResourcePrimKey(resourcePrimKey);
		}

		String gid = (String)attributes.get("gid");

		if (gid != null) {
			setGid(gid);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String sortName = (String)attributes.get("sortName");

		if (sortName != null) {
			setSortName(sortName);
		}

		Integer beginDateYear = (Integer)attributes.get("beginDateYear");

		if (beginDateYear != null) {
			setBeginDateYear(beginDateYear);
		}

		Integer endDateYear = (Integer)attributes.get("endDateYear");

		if (endDateYear != null) {
			setEndDateYear(endDateYear);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Integer area = (Integer)attributes.get("area");

		if (area != null) {
			setArea(area);
		}

		Integer gender = (Integer)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getResourcePrimKey() {
		return _resourcePrimKey;
	}

	@Override
	public void setResourcePrimKey(long resourcePrimKey) {
		_resourcePrimKey = resourcePrimKey;
	}

	@Override
	public boolean isResourceMain() {
		return true;
	}

	@Override
	public String getGid() {
		if (_gid == null) {
			return StringPool.BLANK;
		}
		else {
			return _gid;
		}
	}

	@Override
	public void setGid(String gid) {
		_gid = gid;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getSortName() {
		if (_sortName == null) {
			return StringPool.BLANK;
		}
		else {
			return _sortName;
		}
	}

	@Override
	public void setSortName(String sortName) {
		_sortName = sortName;
	}

	@Override
	public int getBeginDateYear() {
		return _beginDateYear;
	}

	@Override
	public void setBeginDateYear(int beginDateYear) {
		_beginDateYear = beginDateYear;
	}

	@Override
	public int getEndDateYear() {
		return _endDateYear;
	}

	@Override
	public void setEndDateYear(int endDateYear) {
		_endDateYear = endDateYear;
	}

	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_type = type;
	}

	@Override
	public int getArea() {
		return _area;
	}

	@Override
	public void setArea(int area) {
		_area = area;
	}

	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		_gender = gender;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Artist.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Artist toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Artist)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ArtistImpl artistImpl = new ArtistImpl();

		artistImpl.setId(getId());
		artistImpl.setResourcePrimKey(getResourcePrimKey());
		artistImpl.setGid(getGid());
		artistImpl.setName(getName());
		artistImpl.setSortName(getSortName());
		artistImpl.setBeginDateYear(getBeginDateYear());
		artistImpl.setEndDateYear(getEndDateYear());
		artistImpl.setType(getType());
		artistImpl.setArea(getArea());
		artistImpl.setGender(getGender());

		artistImpl.resetOriginalValues();

		return artistImpl;
	}

	@Override
	public int compareTo(Artist artist) {
		long primaryKey = artist.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Artist)) {
			return false;
		}

		Artist artist = (Artist)obj;

		long primaryKey = artist.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Artist> toCacheModel() {
		ArtistCacheModel artistCacheModel = new ArtistCacheModel();

		artistCacheModel.id = getId();

		artistCacheModel.resourcePrimKey = getResourcePrimKey();

		artistCacheModel.gid = getGid();

		String gid = artistCacheModel.gid;

		if ((gid != null) && (gid.length() == 0)) {
			artistCacheModel.gid = null;
		}

		artistCacheModel.name = getName();

		String name = artistCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			artistCacheModel.name = null;
		}

		artistCacheModel.sortName = getSortName();

		String sortName = artistCacheModel.sortName;

		if ((sortName != null) && (sortName.length() == 0)) {
			artistCacheModel.sortName = null;
		}

		artistCacheModel.beginDateYear = getBeginDateYear();

		artistCacheModel.endDateYear = getEndDateYear();

		artistCacheModel.type = getType();

		artistCacheModel.area = getArea();

		artistCacheModel.gender = getGender();

		return artistCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", resourcePrimKey=");
		sb.append(getResourcePrimKey());
		sb.append(", gid=");
		sb.append(getGid());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", sortName=");
		sb.append(getSortName());
		sb.append(", beginDateYear=");
		sb.append(getBeginDateYear());
		sb.append(", endDateYear=");
		sb.append(getEndDateYear());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", area=");
		sb.append(getArea());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.jkamcc.musicbrainz.model.Artist");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resourcePrimKey</column-name><column-value><![CDATA[");
		sb.append(getResourcePrimKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gid</column-name><column-value><![CDATA[");
		sb.append(getGid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sortName</column-name><column-value><![CDATA[");
		sb.append(getSortName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>beginDateYear</column-name><column-value><![CDATA[");
		sb.append(getBeginDateYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDateYear</column-name><column-value><![CDATA[");
		sb.append(getEndDateYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>area</column-name><column-value><![CDATA[");
		sb.append(getArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Artist.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Artist.class };
	private long _id;
	private long _resourcePrimKey;
	private String _gid;
	private String _name;
	private String _sortName;
	private int _beginDateYear;
	private int _endDateYear;
	private int _type;
	private int _area;
	private int _gender;
	private Artist _escapedModel;
}
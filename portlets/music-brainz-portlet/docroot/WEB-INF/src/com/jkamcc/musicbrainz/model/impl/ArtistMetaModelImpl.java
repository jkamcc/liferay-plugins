/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.jkamcc.musicbrainz.model.impl;

import com.jkamcc.musicbrainz.model.ArtistMeta;
import com.jkamcc.musicbrainz.model.ArtistMetaModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ArtistMeta service. Represents a row in the &quot;artist_meta&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.jkamcc.musicbrainz.model.ArtistMetaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArtistMetaImpl}.
 * </p>
 *
 * @author Juan Carrillo
 * @see ArtistMetaImpl
 * @see com.jkamcc.musicbrainz.model.ArtistMeta
 * @see com.jkamcc.musicbrainz.model.ArtistMetaModel
 * @generated
 */
public class ArtistMetaModelImpl extends BaseModelImpl<ArtistMeta>
	implements ArtistMetaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a artist meta model instance should use the {@link com.jkamcc.musicbrainz.model.ArtistMeta} interface instead.
	 */
	public static final String TABLE_NAME = "artist_meta";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "rating", Types.INTEGER },
			{ "rating_count", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table artist_meta (id LONG not null primary key,rating INTEGER,rating_count INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table artist_meta";
	public static final String ORDER_BY_JPQL = " ORDER BY artistMeta.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY artist_meta.id ASC";
	public static final String DATA_SOURCE = "musicBrainzDataSource";
	public static final String SESSION_FACTORY = "musicBrainzSessionFactory";
	public static final String TX_MANAGER = "musicBrainzTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.jkamcc.musicbrainz.model.ArtistMeta"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.jkamcc.musicbrainz.model.ArtistMeta"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.jkamcc.musicbrainz.model.ArtistMeta"));

	public ArtistMetaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ArtistMeta.class;
	}

	@Override
	public String getModelClassName() {
		return ArtistMeta.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("rating", getRating());
		attributes.put("ratingCount", getRatingCount());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Integer rating = (Integer)attributes.get("rating");

		if (rating != null) {
			setRating(rating);
		}

		Integer ratingCount = (Integer)attributes.get("ratingCount");

		if (ratingCount != null) {
			setRatingCount(ratingCount);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public int getRating() {
		return _rating;
	}

	@Override
	public void setRating(int rating) {
		_rating = rating;
	}

	@Override
	public int getRatingCount() {
		return _ratingCount;
	}

	@Override
	public void setRatingCount(int ratingCount) {
		_ratingCount = ratingCount;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ArtistMeta.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ArtistMeta toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ArtistMeta)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ArtistMetaImpl artistMetaImpl = new ArtistMetaImpl();

		artistMetaImpl.setId(getId());
		artistMetaImpl.setRating(getRating());
		artistMetaImpl.setRatingCount(getRatingCount());

		artistMetaImpl.resetOriginalValues();

		return artistMetaImpl;
	}

	@Override
	public int compareTo(ArtistMeta artistMeta) {
		long primaryKey = artistMeta.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ArtistMeta)) {
			return false;
		}

		ArtistMeta artistMeta = (ArtistMeta)obj;

		long primaryKey = artistMeta.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ArtistMeta> toCacheModel() {
		ArtistMetaCacheModel artistMetaCacheModel = new ArtistMetaCacheModel();

		artistMetaCacheModel.id = getId();

		artistMetaCacheModel.rating = getRating();

		artistMetaCacheModel.ratingCount = getRatingCount();

		return artistMetaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", rating=");
		sb.append(getRating());
		sb.append(", ratingCount=");
		sb.append(getRatingCount());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.jkamcc.musicbrainz.model.ArtistMeta");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rating</column-name><column-value><![CDATA[");
		sb.append(getRating());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ratingCount</column-name><column-value><![CDATA[");
		sb.append(getRatingCount());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ArtistMeta.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ArtistMeta.class
		};
	private long _id;
	private int _rating;
	private int _ratingCount;
	private ArtistMeta _escapedModel;
}